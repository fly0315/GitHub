#include <tm1638.h>
#include "pt-1.4/BSP_cfg.h"
#include "pt-1.4/PtThreadEx.h"
#include "UnlockFifoBuffer/UnlockFifoBuffer.h"
#include "DataInterface.h"

unsigned long uTime = 0;	// 扫过两列传感器的时间间隔
enum AD_INDEX
{
	CH_A = 0,
	CH_B = 1,
	CHANNEL_NUM
}adIndex;

struct AD_CHANNEL
{
	AD_INDEX INDEX;
	unsigned int PIN;
	int BASE_VALUE;		// the base line of the sensor value
};

AD_CHANNEL adChannels[] =
{
	{CH_A, A1, 0},
	{CH_B, A0, 0}
};

const int THRESHOLD = 80;	// IF (curValue - BaseValue > Threshold): trige time-meter

TimeMeterST tmST; // STOP=0;START_A=1;START_B=2;INIT=3
const int TIME_INTERVAL = 1000;	// 两次计时间隔ms

unsigned long curTimeCnt = 0;
unsigned long preTimeCnt = 0;

/**************************
** tm1638 tube
**************************/
//each segment of a tube
const unsigned char  Seg_test[8] = { 0x20,0x01,0x02,0x04,0x08,0x10,0x40,0x80 };
//temp arrary for tube to show
unsigned char initShow_Welcome[10] = { 0x76,0x79,0x38,0x38,0xbf,0x88,0x5b,0x3f,0x86,0x88 };	 // HELLO._.201._.

const int pin_STB = 12;
const int pin_CLK = 11;
const int pin_DIO = 10;

// 数显管
//from 0x00~0x07
unsigned char lightLevel = 0x01;
TM1638 tm1638(pin_STB, pin_CLK, pin_DIO, lightLevel);
extern DisplayInfo TubeShow;
// 蜂鸣器
const int pin_BUZZER = 13;
// 遥控器
// int RECV_PIN = 2;
// IRrecv irrecv(RECV_PIN);
// decode_results results;

/**
 * NEW
 */
extern PtThreadEx ThreadQ[];
void InitData();
static int Task_TimeMeter(struct pt *pt);
static int Task_Display(struct pt *pt);
static int Task_Speaker(struct pt *pt);
static int Task_Config(struct pt *pt);
/*STOP = 0,START_A=1,START_B=2,INIT=3,*/
void TMMT_Init();
void TMMT_Stop();
void TMMT_CHA();
void TMMT_CHB();
pFUN TimeMeterFuns[] =
{
	TMMT_Stop,
	TMMT_CHA,
	TMMT_CHB,
	TMMT_Init
};

void setup() {				
	// DEFAULT: the default analog reference of 5 volts(on 5V Arduino boards) or 3.3 volts(on 3.3V Arduino boards)
	// INTERNAL : an built - in reference, equal to 1.1 volts on the ATmega168 or ATmega328 and 2.56 volts on the ATmega8(not available on the Arduino Mega)
	// EXTERNAL : the voltage applied to the AREF pin(0 to 5V only) is used as the reference.
	analogReference(INTERNAL);
	// 蜂鸣器
	pinMode(pin_BUZZER, OUTPUT);

	// 红外遥控器
// 	irrecv.enableIRIn(); // Start the receiver
	/************************************************************************/
	/* AD采样Prescaler越小精度越差，默认为128
	** 所以假設 Arduino 的時脈(Clock)是 16MHz,
	**	則 ADC clock = 16MHz / 128 = 125KHz;
	**	一次 ADC 轉換要踢它13下, 就是要 13 clock (tick),
	**	於是變成 125KHz/13 = 9615Hz
	** 默认为9615Hz~10kHz
	** Prescaler=8理论频率为153.846kHz;=16理论值为77kHz;=4---307.69kHz;
	** 本程序为两通道采样,采样频率还要除2                                                                    */
	/************************************************************************/
	setPrescale(4);		// 设定预分频因子：128--111；64--110；32--101；16--100；8--011；4--010；
						// start serial port at 9600 bps:
	Serial.begin(115200);
	while (!Serial)
	{
		; // wait for serial port to connect. Needed for native USB port only
	}
	InitData();
	ConfigCpuTimer2(1);
	StartCpuTimer2();
}

void loop() {
	// 使用SWITCH语句尽量降低AD采集占用的时钟周期
// 	switch (tmStartFlag)
// 	{
// 	case 0:	// 计时没有开始
// 		if (!initState)	// 初始化完毕，监测A/B通道值
// 		{
// 			// 读取传感器的值
// 			// 如果检测到一个通道有上升沿(大于某一阈值)，则打开计时器或停止计时器
// 			// 检测到一个通道触发计时(返回值非0)，立即进入下轮查询
// 			unsigned int ad_A = analogRead(adPin_A);
// 			if (OperateTimeMeter(1, ad_A - BaseValue_A) == 0) // A通道上升沿检测
// 			{			
// 				unsigned int ad_B = analogRead(adPin_B);
// 				OperateTimeMeter(2, ad_B - BaseValue_B);// B通道上升沿检测
// 			}
// 			//////////////////////////////////////////////////////////////////////////
// 			// 串口发送信息	
// // 			Serial.println("BaseB=");
// // 			Serial.println(BaseValue_B);
// // 			Serial.print("SampleB=");
// // 			Serial.println(analogRead(adPin_B));
// 			//////////////////////////////////////////////////////////////////////////
// 		}
// 		// 如果需要重置，则进入初始化。采集10次取均值作为基准值。
// 		else
// 		{
// 			initCnt++;
// 			digitalWrite(pin_BUZZER, HIGH);
// 			// 发现NANO板上电第一次AD采集的值不准，所以adValuesA[0]、adValuesB[0]被舍弃。
// 			static unsigned int adValuesA[11], adValuesB[11];
// 			if (initCnt < 12)	// 累加传感器的值
// 			{
// 				adValuesA[initCnt - 1] = analogRead(adPin_A);
// 				adValuesB[initCnt - 1] = analogRead(adPin_B);
// 
// 				// show welcome!!!
// 				if (initCnt < 9)
// 				{
// 					for (int j = 0; j < 10; j++)
// 					{
// 						tm1638.DisplayOneDigi_TM1638(j + 1, Seg_test[initCnt - 1]);
// 					}
// 					delay(100);
// 				}
// 			}
// 			else
// 			{
// 				initState = false;
// 				BaseValue_A = BaseValue_B = 0;
// 				// 读取传感器的值作为基准值，之后读取的传感器值与该值作差值，判断结果是否大于某一阈值
// 				for (int i = 0; i < 10; i++)
// 				{
// 					Serial.println("*****");
// 					Serial.println(adValuesB[i+1]);
// 					Serial.println("*****");
// 					BaseValue_A += adValuesA[i+1];
// 					BaseValue_B += adValuesB[i+1];
// 				}
// 
// 				BaseValue_A *= 0.1;	// 10次平均
// 				BaseValue_B *= 0.1;
// 
// 				curTimeCnt = preTimeCnt = micros();
// 				Serial.println("start");
// 				Serial.println(BaseValue_A);
// 				Serial.println(BaseValue_B);
// 				tm1638.DisplayArr_TM1638(1, &initShow_Welcome[0], 10);
// 				digitalWrite(pin_BUZZER, LOW);
// 			}
// 			//初始化时指示灯为未触发状态:red
// 			setLedState(1, ledState[0]);
// 			setLedState(2, ledState[1]);
// 		}
// 		break;
// 	case 1:	// A触发计时开始,监测B通道上升沿
// 		OperateTimeMeter(2, analogRead(adPin_B) - BaseValue_B);
// 		break;
// 	case 2:	// B触发计时开始,监测A通道上升沿
// 		OperateTimeMeter(1, analogRead(adPin_A) - BaseValue_A);
// 		break;
// 	default:
// 		break;
// 	}
// 	ThreadSchedule();
// 	TimeMeterFuns[tmST]();
	ThreadQ[TKIN_TMMT].SetState(READY);
	ThreadQ[TKIN_SPEAKER].SetState(READY);
	// Multi-Threads Schedule.
	ThreadQ[TKIN_TMMT].Schedule();
	ThreadQ[TKIN_DISPLAY].Schedule();
	ThreadQ[TKIN_SPEAKER].Schedule();
}

void InitData()
{
	tmST = INIT;
	uTime = 0;
	ThreadQ[TKIN_TMMT].CreateTask(
		TKIN_TMMT, Task_TimeMeter, 0, READY, NULL);
	ThreadQ[TKIN_DISPLAY].CreateTask(
		TKIN_DISPLAY, Task_Display, 0, WAIT, NULL);
	ThreadQ[TKIN_SPEAKER].CreateTask(
		TKIN_SPEAKER, Task_Speaker, 0, WAIT, NULL);
// 	ThreadQ[TKIN_CONFIG].CreateTask(
// 		TKIN_CONFIG, Task_Config, 0, WAIT, NULL);
}

int Task_TimeMeter(struct pt *pt)
{
	/* A protothread function must begin with PT_BEGIN() which takes a
	pointer to a struct pt. */
	PT_BEGIN(pt);

	/* We loop forever here. */
	while (1)
	{
		/* Wait until the SCIA receive interrupt has set its flag. */
		PT_WAIT_UNTIL(pt, (ThreadQ[TKIN_TMMT].GetState()));
		//////////////////////////////////////////////////////////////////////////
		if ((tmST == START_A) || (tmST == START_B))
		{
			TimeMeterFuns[tmST]();
			if (tmST == STOP)
			{
				
				ThreadQ[TKIN_TMMT].SLEEP_MS(TIME_INTERVAL);
				PT_WAIT_UNTIL(pt, ThreadQ[TKIN_TMMT].IsAwake_MS());
				
			}
		}
		else
		{
			TimeMeterFuns[tmST]();	
		}
		
		//////////////////////////////////////////////////////////////////////////
		ThreadQ[TKIN_TMMT].SetState(WAIT);
		/* And we loop. */
	}

	/* All protothread functions must end with PT_END() which takes a
	pointer to a struct pt. */
	PT_END(pt);
}
int Task_Display(struct pt *pt)
{
	/* A protothread function must begin with PT_BEGIN() which takes a
	pointer to a struct pt. */
	PT_BEGIN(pt);

	/* We loop forever here. */
	while (1)
	{
		/* Wait until the SCIA receive interrupt has set its flag. */
		PT_WAIT_UNTIL(pt, (ThreadQ[TKIN_DISPLAY].GetState()));
		//////////////////////////////////////////////////////////////////////////
		if (STOP == tmST)
		{
			if (uTime == 0)
			{
				Serial.println("Display");
				Serial.println(adChannels[CH_A].BASE_VALUE);
				Serial.println(adChannels[CH_B].BASE_VALUE);
			}
			else
			{
				TubeShow.MakeInfo(uTime);
				tm1638.DisplayArr_TM1638(1, TubeShow.Info, 10);
				Serial.println(uTime*0.000001, 6);
			}
		}
		else if (INIT == tmST)
		{
			static int InitCnt = 0;
			// Tube Test
			if (InitCnt < 9)
			{
				for (int j = 0; j < 10; j++)
				{
					tm1638.DisplayOneDigi_TM1638(j + 1, Seg_test[InitCnt - 1]);
				}
				delay(100);
			}
			else
			{
				tm1638.DisplayArr_TM1638(1, initShow_Welcome, 10);
			}
			InitCnt++;
		}
		//////////////////////////////////////////////////////////////////////////
		ThreadQ[TKIN_DISPLAY].SetState(WAIT);
		/* And we loop. */
	}

	/* All protothread functions must end with PT_END() which takes a
	pointer to a struct pt. */
	PT_END(pt);
}
int Task_Speaker(struct pt *pt)
{
	/* A protothread function must begin with PT_BEGIN() which takes a
	pointer to a struct pt. */
	PT_BEGIN(pt);

	/* We loop forever here. */
	while (1)
	{
		/* Wait until the SCIA receive interrupt has set its flag. */
		PT_WAIT_UNTIL(pt, (ThreadQ[TKIN_SPEAKER].GetState()));
		//////////////////////////////////////////////////////////////////////////
		
		if (STOP == tmST)
		{
			digitalWrite(pin_BUZZER, LOW);
		}
		else if (INIT == tmST)
		{
			digitalWrite(pin_BUZZER, HIGH);
			ThreadQ[TKIN_SPEAKER].SLEEP_MS(50);
			PT_WAIT_UNTIL(pt, ThreadQ[TKIN_SPEAKER].IsAwake_MS());
			digitalWrite(pin_BUZZER, LOW);
			ThreadQ[TKIN_SPEAKER].SLEEP_MS(50);
			PT_WAIT_UNTIL(pt, ThreadQ[TKIN_SPEAKER].IsAwake_MS());
			
		}
		else if (START_A == tmST)
		{
			digitalWrite(pin_BUZZER, HIGH);
		}
		else if (START_B == tmST)
		{
			digitalWrite(pin_BUZZER, HIGH);
		}
		//////////////////////////////////////////////////////////////////////////
		ThreadQ[TKIN_SPEAKER].SetState(WAIT);
		/* And we loop. */
	}

	/* All protothread functions must end with PT_END() which takes a
	pointer to a struct pt. */
	PT_END(pt);
}
int Task_Config(struct pt *pt)
{
	/* A protothread function must begin with PT_BEGIN() which takes a
	pointer to a struct pt. */
	PT_BEGIN(pt);

	/* We loop forever here. */
	while (1)
	{
		/* Wait until the SCIA receive interrupt has set its flag. */
		PT_WAIT_UNTIL(pt, (ThreadQ[TKIN_CONFIG].GetState()));
		//////////////////////////////////////////////////////////////////////////
		TimeMeterFuns[tmST]();
		//////////////////////////////////////////////////////////////////////////
		ThreadQ[TKIN_CONFIG].SetState(WAIT);
		/* And we loop. */
	}

	/* All protothread functions must end with PT_END() which takes a
	pointer to a struct pt. */
	PT_END(pt);
}

void TMMT_Init()
{
	static int sampleCnt = 0;
	static int adValues[CHANNEL_NUM][11];

	if (sampleCnt < 11)
	{
		adValues[CH_A][sampleCnt] = analogRead(adChannels[CH_A].PIN);
		adValues[CH_B][sampleCnt] = analogRead(adChannels[CH_B].PIN);
		sampleCnt++;
	}
	else
	{
		tmST = STOP; sampleCnt = 0;
		adChannels[CH_A].BASE_VALUE = adChannels[CH_B].BASE_VALUE = 0;
		// 读取传感器的值作为基准值，之后读取的传感器值与该值作差值，判断结果是否大于某一阈值
		for (int i = 0; i < 10; i++)
		{
			adChannels[CH_A].BASE_VALUE += adValues[CH_A][i + 1];
			adChannels[CH_B].BASE_VALUE += adValues[CH_B][i + 1];
		}
		adChannels[CH_A].BASE_VALUE *= 0.1;	// 10次平均
		adChannels[CH_B].BASE_VALUE *= 0.1;
	}
	// Send Display MSG.
	ThreadQ[TKIN_DISPLAY].SetState(READY);
	ThreadQ[TKIN_SPEAKER].SetState(READY);
}
void TMMT_Stop()
{
	do 
	{
		if (
			analogRead(adChannels[CH_A].PIN)
			- adChannels[CH_A].BASE_VALUE > THRESHOLD
			)
		{
			preTimeCnt = curTimeCnt = micros();
			tmST = START_A;
			break;
		}

		if (
			analogRead(adChannels[CH_B].PIN)
			- adChannels[CH_B].BASE_VALUE > THRESHOLD
			)
		{
			preTimeCnt = curTimeCnt = micros();
			tmST = START_B;
			break;
		}
	} while (0);
}
void TMMT_CHA()
{
	if (
		analogRead(adChannels[CH_B].PIN)
		- adChannels[CH_B].BASE_VALUE < THRESHOLD
		)
	{
		return;
	}
	// calculate elapse time 
	curTimeCnt = micros();
	uTime = curTimeCnt - preTimeCnt; // us
	// stop the time-meter
	tmST = STOP;
	ThreadQ[TKIN_DISPLAY].SetState(READY);
}
void TMMT_CHB()
{
	if (
		analogRead(adChannels[CH_A].PIN)
		- adChannels[CH_A].BASE_VALUE < THRESHOLD
		)
	{
		return;
	}
	// calculate elapse time 
	curTimeCnt = micros();
	uTime = curTimeCnt - preTimeCnt; // us
	// stop the time-meter
	tmST = STOP;
	ThreadQ[TKIN_DISPLAY].SetState(READY);
}
// void Display_Init()
// {
// 	static int InitCnt = 0;
// 	// Tube Test
// 	if (InitCnt < 9)
// 	{
// 		for (int j = 0; j < 10; j++)
// 		{
// 			tm1638.DisplayOneDigi_TM1638(j + 1, Seg_test[InitCnt - 1]);
// 		}
// 		delay(100);
// 	}
// 	else
// 	{
// 		tm1638.DisplayArr_TM1638(1, initShow_Welcome, 10);
// 	}
// 	InitCnt++;
// }
// void Display_Stop()
// {
// 	if (uTime == 0)
// 	{
// 		Serial.println("Display");
// 		Serial.println(adChannels[CH_A].BASE_VALUE);
// 		Serial.println(adChannels[CH_B].BASE_VALUE);
// 		return;
// 	}
// 	TubeShow.MakeInfo(uTime);
// 	tm1638.DisplayArr_TM1638(1, TubeShow.Info, 10);
// }
// void Display_CHA()
// {
// 
// }
// void Display_CHB()
// {
// 
// }
// ThreadQ[TKIN_FR_GUARANTEE].SLEEP_MS(1);
// PT_WAIT_UNTIL(pt, ThreadQ[TKIN_FR_GUARANTEE].IsAwake_MS());
